:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/VisualShaderNodeUIntOp.xml.

.. _class_VisualShaderNodeUIntOp:

VisualShaderNodeUIntOp
======================

**Inherits:** :ref:`VisualShaderNode<class_VisualShaderNode>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

An unsigned integer scalar operator to be used within the visual shader graph.

.. rst-class:: classref-introduction-group

Description
-----------

Applies :ref:`operator<class_VisualShaderNodeUIntOp_property_operator>` to two unsigned integer inputs: ``a`` and ``b``.

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +-------------------------------------------------------+-----------------------------------------------------------------+-------+
   | :ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` | :ref:`operator<class_VisualShaderNodeUIntOp_property_operator>` | ``0`` |
   +-------------------------------------------------------+-----------------------------------------------------------------+-------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Enumerations
------------

.. _enum_VisualShaderNodeUIntOp_Operator:

.. rst-class:: classref-enumeration

enum **Operator**: :ref:`ðŸ”—<enum_VisualShaderNodeUIntOp_Operator>`

.. _class_VisualShaderNodeUIntOp_constant_OP_ADD:

.. rst-class:: classref-enumeration-constant

:ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` **OP_ADD** = ``0``

Sums two numbers using ``a + b``.

.. _class_VisualShaderNodeUIntOp_constant_OP_SUB:

.. rst-class:: classref-enumeration-constant

:ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` **OP_SUB** = ``1``

Subtracts two numbers using ``a - b``.

.. _class_VisualShaderNodeUIntOp_constant_OP_MUL:

.. rst-class:: classref-enumeration-constant

:ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` **OP_MUL** = ``2``

Multiplies two numbers using ``a * b``.

.. _class_VisualShaderNodeUIntOp_constant_OP_DIV:

.. rst-class:: classref-enumeration-constant

:ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` **OP_DIV** = ``3``

Divides two numbers using ``a / b``.

.. _class_VisualShaderNodeUIntOp_constant_OP_MOD:

.. rst-class:: classref-enumeration-constant

:ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` **OP_MOD** = ``4``

Calculates the remainder of two numbers using ``a % b``.

.. _class_VisualShaderNodeUIntOp_constant_OP_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` **OP_MAX** = ``5``

Returns the greater of two numbers. Translates to ``max(a, b)`` in the Godot Shader Language.

.. _class_VisualShaderNodeUIntOp_constant_OP_MIN:

.. rst-class:: classref-enumeration-constant

:ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` **OP_MIN** = ``6``

Returns the lesser of two numbers. Translates to ``max(a, b)`` in the Godot Shader Language.

.. _class_VisualShaderNodeUIntOp_constant_OP_BITWISE_AND:

.. rst-class:: classref-enumeration-constant

:ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` **OP_BITWISE_AND** = ``7``

Returns the result of bitwise ``AND`` operation on the integer. Translates to ``a & b`` in the Godot Shader Language.

.. _class_VisualShaderNodeUIntOp_constant_OP_BITWISE_OR:

.. rst-class:: classref-enumeration-constant

:ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` **OP_BITWISE_OR** = ``8``

Returns the result of bitwise ``OR`` operation for two integers. Translates to ``a | b`` in the Godot Shader Language.

.. _class_VisualShaderNodeUIntOp_constant_OP_BITWISE_XOR:

.. rst-class:: classref-enumeration-constant

:ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` **OP_BITWISE_XOR** = ``9``

Returns the result of bitwise ``XOR`` operation for two integers. Translates to ``a ^ b`` in the Godot Shader Language.

.. _class_VisualShaderNodeUIntOp_constant_OP_BITWISE_LEFT_SHIFT:

.. rst-class:: classref-enumeration-constant

:ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` **OP_BITWISE_LEFT_SHIFT** = ``10``

Returns the result of bitwise left shift operation on the integer. Translates to ``a << b`` in the Godot Shader Language.

.. _class_VisualShaderNodeUIntOp_constant_OP_BITWISE_RIGHT_SHIFT:

.. rst-class:: classref-enumeration-constant

:ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` **OP_BITWISE_RIGHT_SHIFT** = ``11``

Returns the result of bitwise right shift operation on the integer. Translates to ``a >> b`` in the Godot Shader Language.

.. _class_VisualShaderNodeUIntOp_constant_OP_ENUM_SIZE:

.. rst-class:: classref-enumeration-constant

:ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` **OP_ENUM_SIZE** = ``12``

Represents the size of the :ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` enum.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_VisualShaderNodeUIntOp_property_operator:

.. rst-class:: classref-property

:ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` **operator** = ``0`` :ref:`ðŸ”—<class_VisualShaderNodeUIntOp_property_operator>`

.. rst-class:: classref-property-setget

- |void| **set_operator**\ (\ value\: :ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>`\ )
- :ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` **get_operator**\ (\ )

An operator to be applied to the inputs. See :ref:`Operator<enum_VisualShaderNodeUIntOp_Operator>` for options.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
