:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/ParticleProcessMaterial.xml.

.. _class_ParticleProcessMaterial:

ParticleProcessMaterial
=======================

**Inherits:** :ref:`Material<class_Material>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

Holds a particle configuration for :ref:`GPUParticles2D<class_GPUParticles2D>` or :ref:`GPUParticles3D<class_GPUParticles3D>` nodes.

.. rst-class:: classref-introduction-group

Description
-----------

**ParticleProcessMaterial** defines particle properties and behavior. It is used in the ``process_material`` of the :ref:`GPUParticles2D<class_GPUParticles2D>` and :ref:`GPUParticles3D<class_GPUParticles3D>` nodes. Some of this material's properties are applied to each particle when emitted, while others can have a :ref:`CurveTexture<class_CurveTexture>` or a :ref:`GradientTexture1D<class_GradientTexture1D>` applied to vary numerical or color values over the lifetime of the particle.

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`alpha_curve<class_ParticleProcessMaterial_property_alpha_curve>`                                                 |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`angle_curve<class_ParticleProcessMaterial_property_angle_curve>`                                                 |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`angle_max<class_ParticleProcessMaterial_property_angle_max>`                                                     | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`angle_min<class_ParticleProcessMaterial_property_angle_min>`                                                     | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`angular_velocity_curve<class_ParticleProcessMaterial_property_angular_velocity_curve>`                           |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`angular_velocity_max<class_ParticleProcessMaterial_property_angular_velocity_max>`                               | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`angular_velocity_min<class_ParticleProcessMaterial_property_angular_velocity_min>`                               | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`anim_offset_curve<class_ParticleProcessMaterial_property_anim_offset_curve>`                                     |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`anim_offset_max<class_ParticleProcessMaterial_property_anim_offset_max>`                                         | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`anim_offset_min<class_ParticleProcessMaterial_property_anim_offset_min>`                                         | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`anim_speed_curve<class_ParticleProcessMaterial_property_anim_speed_curve>`                                       |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`anim_speed_max<class_ParticleProcessMaterial_property_anim_speed_max>`                                           | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`anim_speed_min<class_ParticleProcessMaterial_property_anim_speed_min>`                                           | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`attractor_interaction_enabled<class_ParticleProcessMaterial_property_attractor_interaction_enabled>`             | ``true``                |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`collision_bounce<class_ParticleProcessMaterial_property_collision_bounce>`                                       |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`collision_friction<class_ParticleProcessMaterial_property_collision_friction>`                                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>`   | :ref:`collision_mode<class_ParticleProcessMaterial_property_collision_mode>`                                           | ``0``                   |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`collision_use_scale<class_ParticleProcessMaterial_property_collision_use_scale>`                                 | ``false``               |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Color<class_Color>`                                          | :ref:`color<class_ParticleProcessMaterial_property_color>`                                                             | ``Color(1, 1, 1, 1)``   |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`color_initial_ramp<class_ParticleProcessMaterial_property_color_initial_ramp>`                                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`color_ramp<class_ParticleProcessMaterial_property_color_ramp>`                                                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`damping_curve<class_ParticleProcessMaterial_property_damping_curve>`                                             |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`damping_max<class_ParticleProcessMaterial_property_damping_max>`                                                 | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`damping_min<class_ParticleProcessMaterial_property_damping_min>`                                                 | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`direction<class_ParticleProcessMaterial_property_direction>`                                                     | ``Vector3(1, 0, 0)``    |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`directional_velocity_curve<class_ParticleProcessMaterial_property_directional_velocity_curve>`                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`directional_velocity_max<class_ParticleProcessMaterial_property_directional_velocity_max>`                       |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`directional_velocity_min<class_ParticleProcessMaterial_property_directional_velocity_min>`                       |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`emission_box_extents<class_ParticleProcessMaterial_property_emission_box_extents>`                               |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`emission_color_texture<class_ParticleProcessMaterial_property_emission_color_texture>`                           |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`emission_curve<class_ParticleProcessMaterial_property_emission_curve>`                                           |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`emission_normal_texture<class_ParticleProcessMaterial_property_emission_normal_texture>`                         |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`int<class_int>`                                              | :ref:`emission_point_count<class_ParticleProcessMaterial_property_emission_point_count>`                               |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`emission_point_texture<class_ParticleProcessMaterial_property_emission_point_texture>`                           |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`emission_ring_axis<class_ParticleProcessMaterial_property_emission_ring_axis>`                                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`emission_ring_cone_angle<class_ParticleProcessMaterial_property_emission_ring_cone_angle>`                       |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`emission_ring_height<class_ParticleProcessMaterial_property_emission_ring_height>`                               |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`emission_ring_inner_radius<class_ParticleProcessMaterial_property_emission_ring_inner_radius>`                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`emission_ring_radius<class_ParticleProcessMaterial_property_emission_ring_radius>`                               |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>`   | :ref:`emission_shape<class_ParticleProcessMaterial_property_emission_shape>`                                           | ``0``                   |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`emission_shape_offset<class_ParticleProcessMaterial_property_emission_shape_offset>`                             | ``Vector3(0, 0, 0)``    |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`emission_shape_scale<class_ParticleProcessMaterial_property_emission_shape_scale>`                               | ``Vector3(1, 1, 1)``    |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`emission_sphere_radius<class_ParticleProcessMaterial_property_emission_sphere_radius>`                           |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`flatness<class_ParticleProcessMaterial_property_flatness>`                                                       | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`gravity<class_ParticleProcessMaterial_property_gravity>`                                                         | ``Vector3(0, -9.8, 0)`` |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`hue_variation_curve<class_ParticleProcessMaterial_property_hue_variation_curve>`                                 |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`hue_variation_max<class_ParticleProcessMaterial_property_hue_variation_max>`                                     | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`hue_variation_min<class_ParticleProcessMaterial_property_hue_variation_min>`                                     | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`inherit_velocity_ratio<class_ParticleProcessMaterial_property_inherit_velocity_ratio>`                           | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`initial_velocity_max<class_ParticleProcessMaterial_property_initial_velocity_max>`                               | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`initial_velocity_min<class_ParticleProcessMaterial_property_initial_velocity_min>`                               | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`lifetime_randomness<class_ParticleProcessMaterial_property_lifetime_randomness>`                                 | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`linear_accel_curve<class_ParticleProcessMaterial_property_linear_accel_curve>`                                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`linear_accel_max<class_ParticleProcessMaterial_property_linear_accel_max>`                                       | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`linear_accel_min<class_ParticleProcessMaterial_property_linear_accel_min>`                                       | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`orbit_velocity_curve<class_ParticleProcessMaterial_property_orbit_velocity_curve>`                               |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`orbit_velocity_max<class_ParticleProcessMaterial_property_orbit_velocity_max>`                                   | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`orbit_velocity_min<class_ParticleProcessMaterial_property_orbit_velocity_min>`                                   | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`particle_flag_align_y<class_ParticleProcessMaterial_property_particle_flag_align_y>`                             | ``false``               |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`particle_flag_damping_as_friction<class_ParticleProcessMaterial_property_particle_flag_damping_as_friction>`     | ``false``               |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`particle_flag_disable_z<class_ParticleProcessMaterial_property_particle_flag_disable_z>`                         | ``false``               |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`particle_flag_rotate_y<class_ParticleProcessMaterial_property_particle_flag_rotate_y>`                           | ``false``               |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`radial_accel_curve<class_ParticleProcessMaterial_property_radial_accel_curve>`                                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`radial_accel_max<class_ParticleProcessMaterial_property_radial_accel_max>`                                       | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`radial_accel_min<class_ParticleProcessMaterial_property_radial_accel_min>`                                       | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`radial_velocity_curve<class_ParticleProcessMaterial_property_radial_velocity_curve>`                             |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`radial_velocity_max<class_ParticleProcessMaterial_property_radial_velocity_max>`                                 | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`radial_velocity_min<class_ParticleProcessMaterial_property_radial_velocity_min>`                                 | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`scale_curve<class_ParticleProcessMaterial_property_scale_curve>`                                                 |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`scale_max<class_ParticleProcessMaterial_property_scale_max>`                                                     | ``1.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`scale_min<class_ParticleProcessMaterial_property_scale_min>`                                                     | ``1.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`scale_over_velocity_curve<class_ParticleProcessMaterial_property_scale_over_velocity_curve>`                     |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`scale_over_velocity_max<class_ParticleProcessMaterial_property_scale_over_velocity_max>`                         | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`scale_over_velocity_min<class_ParticleProcessMaterial_property_scale_over_velocity_min>`                         | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`spread<class_ParticleProcessMaterial_property_spread>`                                                           | ``45.0``                |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`int<class_int>`                                              | :ref:`sub_emitter_amount_at_collision<class_ParticleProcessMaterial_property_sub_emitter_amount_at_collision>`         |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`int<class_int>`                                              | :ref:`sub_emitter_amount_at_end<class_ParticleProcessMaterial_property_sub_emitter_amount_at_end>`                     |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`sub_emitter_frequency<class_ParticleProcessMaterial_property_sub_emitter_frequency>`                             |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`sub_emitter_keep_velocity<class_ParticleProcessMaterial_property_sub_emitter_keep_velocity>`                     | ``false``               |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` | :ref:`sub_emitter_mode<class_ParticleProcessMaterial_property_sub_emitter_mode>`                                       | ``0``                   |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`tangential_accel_curve<class_ParticleProcessMaterial_property_tangential_accel_curve>`                           |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`tangential_accel_max<class_ParticleProcessMaterial_property_tangential_accel_max>`                               | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`tangential_accel_min<class_ParticleProcessMaterial_property_tangential_accel_min>`                               | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`turbulence_enabled<class_ParticleProcessMaterial_property_turbulence_enabled>`                                   | ``false``               |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`turbulence_influence_max<class_ParticleProcessMaterial_property_turbulence_influence_max>`                       | ``0.1``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`turbulence_influence_min<class_ParticleProcessMaterial_property_turbulence_influence_min>`                       | ``0.1``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`turbulence_influence_over_life<class_ParticleProcessMaterial_property_turbulence_influence_over_life>`           |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`turbulence_initial_displacement_max<class_ParticleProcessMaterial_property_turbulence_initial_displacement_max>` | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`turbulence_initial_displacement_min<class_ParticleProcessMaterial_property_turbulence_initial_displacement_min>` | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`turbulence_noise_scale<class_ParticleProcessMaterial_property_turbulence_noise_scale>`                           | ``9.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`turbulence_noise_speed<class_ParticleProcessMaterial_property_turbulence_noise_speed>`                           | ``Vector3(0, 0, 0)``    |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`turbulence_noise_speed_random<class_ParticleProcessMaterial_property_turbulence_noise_speed_random>`             | ``0.2``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`turbulence_noise_strength<class_ParticleProcessMaterial_property_turbulence_noise_strength>`                     | ``1.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>`                               |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`velocity_pivot<class_ParticleProcessMaterial_property_velocity_pivot>`                                           | ``Vector3(0, 0, 0)``    |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector2<class_Vector2>`     | :ref:`get_param<class_ParticleProcessMaterial_method_get_param>`\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|                                                           |
   +-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`         | :ref:`get_param_max<class_ParticleProcessMaterial_method_get_param_max>`\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|                                                   |
   +-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`         | :ref:`get_param_min<class_ParticleProcessMaterial_method_get_param_min>`\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|                                                   |
   +-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Texture2D<class_Texture2D>` | :ref:`get_param_texture<class_ParticleProcessMaterial_method_get_param_texture>`\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|                                           |
   +-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`           | :ref:`get_particle_flag<class_ParticleProcessMaterial_method_get_particle_flag>`\ (\ particle_flag\: :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>`\ ) |const|                           |
   +-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`set_param<class_ParticleProcessMaterial_method_set_param>`\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`Vector2<class_Vector2>`\ )                            |
   +-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )                        |
   +-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )                        |
   +-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>`\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )      |
   +-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`set_particle_flag<class_ParticleProcessMaterial_method_set_particle_flag>`\ (\ particle_flag\: :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>`, enable\: :ref:`bool<class_bool>`\ ) |
   +-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Enumerations
------------

.. _enum_ParticleProcessMaterial_Parameter:

.. rst-class:: classref-enumeration

enum **Parameter**: :ref:`🔗<enum_ParticleProcessMaterial_Parameter>`

.. _class_ParticleProcessMaterial_constant_PARAM_INITIAL_LINEAR_VELOCITY:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_INITIAL_LINEAR_VELOCITY** = ``0``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set initial velocity properties.

.. _class_ParticleProcessMaterial_constant_PARAM_ANGULAR_VELOCITY:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_ANGULAR_VELOCITY** = ``1``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set angular velocity properties.

.. _class_ParticleProcessMaterial_constant_PARAM_ORBIT_VELOCITY:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_ORBIT_VELOCITY** = ``2``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set orbital velocity properties.

.. _class_ParticleProcessMaterial_constant_PARAM_LINEAR_ACCEL:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_LINEAR_ACCEL** = ``3``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set linear acceleration properties.

.. _class_ParticleProcessMaterial_constant_PARAM_RADIAL_ACCEL:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_RADIAL_ACCEL** = ``4``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set radial acceleration properties.

.. _class_ParticleProcessMaterial_constant_PARAM_TANGENTIAL_ACCEL:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_TANGENTIAL_ACCEL** = ``5``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set tangential acceleration properties.

.. _class_ParticleProcessMaterial_constant_PARAM_DAMPING:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_DAMPING** = ``6``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set damping properties.

.. _class_ParticleProcessMaterial_constant_PARAM_ANGLE:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_ANGLE** = ``7``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set angle properties.

.. _class_ParticleProcessMaterial_constant_PARAM_SCALE:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_SCALE** = ``8``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set scale properties.

.. _class_ParticleProcessMaterial_constant_PARAM_HUE_VARIATION:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_HUE_VARIATION** = ``9``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set hue variation properties.

.. _class_ParticleProcessMaterial_constant_PARAM_ANIM_SPEED:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_ANIM_SPEED** = ``10``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set animation speed properties.

.. _class_ParticleProcessMaterial_constant_PARAM_ANIM_OFFSET:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_ANIM_OFFSET** = ``11``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set animation offset properties.

.. _class_ParticleProcessMaterial_constant_PARAM_RADIAL_VELOCITY:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_RADIAL_VELOCITY** = ``15``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set radial velocity properties.

.. _class_ParticleProcessMaterial_constant_PARAM_DIRECTIONAL_VELOCITY:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_DIRECTIONAL_VELOCITY** = ``16``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set directional velocity properties.

.. _class_ParticleProcessMaterial_constant_PARAM_SCALE_OVER_VELOCITY:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_SCALE_OVER_VELOCITY** = ``17``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set scale over velocity properties.

.. _class_ParticleProcessMaterial_constant_PARAM_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_MAX** = ``18``

Represents the size of the :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` enum.

.. _class_ParticleProcessMaterial_constant_PARAM_TURB_VEL_INFLUENCE:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_TURB_VEL_INFLUENCE** = ``13``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>` and :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` to set the turbulence minimum und maximum influence on each particles velocity.

.. _class_ParticleProcessMaterial_constant_PARAM_TURB_INIT_DISPLACEMENT:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_TURB_INIT_DISPLACEMENT** = ``14``

Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>` and :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` to set the turbulence minimum and maximum displacement of the particles spawn position.

.. _class_ParticleProcessMaterial_constant_PARAM_TURB_INFLUENCE_OVER_LIFE:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_TURB_INFLUENCE_OVER_LIFE** = ``12``

Use with :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set the turbulence influence over the particles life time.

.. rst-class:: classref-item-separator

----

.. _enum_ParticleProcessMaterial_ParticleFlags:

.. rst-class:: classref-enumeration

enum **ParticleFlags**: :ref:`🔗<enum_ParticleProcessMaterial_ParticleFlags>`

.. _class_ParticleProcessMaterial_constant_PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY:

.. rst-class:: classref-enumeration-constant

:ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` **PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY** = ``0``

Use with :ref:`set_particle_flag<class_ParticleProcessMaterial_method_set_particle_flag>` to set :ref:`particle_flag_align_y<class_ParticleProcessMaterial_property_particle_flag_align_y>`.

.. _class_ParticleProcessMaterial_constant_PARTICLE_FLAG_ROTATE_Y:

.. rst-class:: classref-enumeration-constant

:ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` **PARTICLE_FLAG_ROTATE_Y** = ``1``

Use with :ref:`set_particle_flag<class_ParticleProcessMaterial_method_set_particle_flag>` to set :ref:`particle_flag_rotate_y<class_ParticleProcessMaterial_property_particle_flag_rotate_y>`.

.. _class_ParticleProcessMaterial_constant_PARTICLE_FLAG_DISABLE_Z:

.. rst-class:: classref-enumeration-constant

:ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` **PARTICLE_FLAG_DISABLE_Z** = ``2``

Use with :ref:`set_particle_flag<class_ParticleProcessMaterial_method_set_particle_flag>` to set :ref:`particle_flag_disable_z<class_ParticleProcessMaterial_property_particle_flag_disable_z>`.

.. _class_ParticleProcessMaterial_constant_PARTICLE_FLAG_DAMPING_AS_FRICTION:

.. rst-class:: classref-enumeration-constant

:ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` **PARTICLE_FLAG_DAMPING_AS_FRICTION** = ``3``

.. container:: contribute

	There is currently no description for this enum. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!



.. _class_ParticleProcessMaterial_constant_PARTICLE_FLAG_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` **PARTICLE_FLAG_MAX** = ``4``

Represents the size of the :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` enum.

.. rst-class:: classref-item-separator

----

.. _enum_ParticleProcessMaterial_EmissionShape:

.. rst-class:: classref-enumeration

enum **EmissionShape**: :ref:`🔗<enum_ParticleProcessMaterial_EmissionShape>`

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_POINT:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_POINT** = ``0``

All particles will be emitted from a single point.

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_SPHERE:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_SPHERE** = ``1``

Particles will be emitted in the volume of a sphere.

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_SPHERE_SURFACE:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_SPHERE_SURFACE** = ``2``

Particles will be emitted on the surface of a sphere.

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_BOX:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_BOX** = ``3``

Particles will be emitted in the volume of a box.

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_POINTS:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_POINTS** = ``4``

Particles will be emitted at a position determined by sampling a random point on the :ref:`emission_point_texture<class_ParticleProcessMaterial_property_emission_point_texture>`. Particle color will be modulated by :ref:`emission_color_texture<class_ParticleProcessMaterial_property_emission_color_texture>`.

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_DIRECTED_POINTS:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_DIRECTED_POINTS** = ``5``

Particles will be emitted at a position determined by sampling a random point on the :ref:`emission_point_texture<class_ParticleProcessMaterial_property_emission_point_texture>`. Particle velocity and rotation will be set based on :ref:`emission_normal_texture<class_ParticleProcessMaterial_property_emission_normal_texture>`. Particle color will be modulated by :ref:`emission_color_texture<class_ParticleProcessMaterial_property_emission_color_texture>`.

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_RING** = ``6``

Particles will be emitted in a ring or cylinder.

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_MAX** = ``7``

Represents the size of the :ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` enum.

.. rst-class:: classref-item-separator

----

.. _enum_ParticleProcessMaterial_SubEmitterMode:

.. rst-class:: classref-enumeration

enum **SubEmitterMode**: :ref:`🔗<enum_ParticleProcessMaterial_SubEmitterMode>`

.. _class_ParticleProcessMaterial_constant_SUB_EMITTER_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` **SUB_EMITTER_DISABLED** = ``0``

.. container:: contribute

	There is currently no description for this enum. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!



.. _class_ParticleProcessMaterial_constant_SUB_EMITTER_CONSTANT:

.. rst-class:: classref-enumeration-constant

:ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` **SUB_EMITTER_CONSTANT** = ``1``

.. container:: contribute

	There is currently no description for this enum. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!



.. _class_ParticleProcessMaterial_constant_SUB_EMITTER_AT_END:

.. rst-class:: classref-enumeration-constant

:ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` **SUB_EMITTER_AT_END** = ``2``

.. container:: contribute

	There is currently no description for this enum. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!



.. _class_ParticleProcessMaterial_constant_SUB_EMITTER_AT_COLLISION:

.. rst-class:: classref-enumeration-constant

:ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` **SUB_EMITTER_AT_COLLISION** = ``3``

.. container:: contribute

	There is currently no description for this enum. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!



.. _class_ParticleProcessMaterial_constant_SUB_EMITTER_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` **SUB_EMITTER_MAX** = ``4``

Represents the size of the :ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` enum.

.. rst-class:: classref-item-separator

----

.. _enum_ParticleProcessMaterial_CollisionMode:

.. rst-class:: classref-enumeration

enum **CollisionMode**: :ref:`🔗<enum_ParticleProcessMaterial_CollisionMode>`

.. _class_ParticleProcessMaterial_constant_COLLISION_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` **COLLISION_DISABLED** = ``0``

No collision for particles. Particles will go through :ref:`GPUParticlesCollision3D<class_GPUParticlesCollision3D>` nodes.

.. _class_ParticleProcessMaterial_constant_COLLISION_RIGID:

.. rst-class:: classref-enumeration-constant

:ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` **COLLISION_RIGID** = ``1``

:ref:`RigidBody3D<class_RigidBody3D>`-style collision for particles using :ref:`GPUParticlesCollision3D<class_GPUParticlesCollision3D>` nodes.

.. _class_ParticleProcessMaterial_constant_COLLISION_HIDE_ON_CONTACT:

.. rst-class:: classref-enumeration-constant

:ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` **COLLISION_HIDE_ON_CONTACT** = ``2``

Hide particles instantly when colliding with a :ref:`GPUParticlesCollision3D<class_GPUParticlesCollision3D>` node. This can be combined with a subemitter that uses the :ref:`COLLISION_RIGID<class_ParticleProcessMaterial_constant_COLLISION_RIGID>` collision mode to "replace" the parent particle with the subemitter on impact.

.. _class_ParticleProcessMaterial_constant_COLLISION_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` **COLLISION_MAX** = ``3``

Represents the size of the :ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` enum.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_ParticleProcessMaterial_property_alpha_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **alpha_curve** :ref:`🔗<class_ParticleProcessMaterial_property_alpha_curve>`

.. rst-class:: classref-property-setget

- |void| **set_alpha_curve**\ (\ value\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_alpha_curve**\ (\ )

The alpha value of each particle's color will be multiplied by this :ref:`CurveTexture<class_CurveTexture>` over its lifetime.

\ **Note:** :ref:`alpha_curve<class_ParticleProcessMaterial_property_alpha_curve>` multiplies the particle mesh's vertex colors. To have a visible effect on a :ref:`BaseMaterial3D<class_BaseMaterial3D>`, :ref:`BaseMaterial3D.vertex_color_use_as_albedo<class_BaseMaterial3D_property_vertex_color_use_as_albedo>` *must* be ``true``. For a :ref:`ShaderMaterial<class_ShaderMaterial>`, ``ALBEDO *= COLOR.rgb;`` must be inserted in the shader's ``fragment()`` function. Otherwise, :ref:`alpha_curve<class_ParticleProcessMaterial_property_alpha_curve>` will have no visible effect.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_angle_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **angle_curve** :ref:`🔗<class_ParticleProcessMaterial_property_angle_curve>`

.. rst-class:: classref-property-setget

- |void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Each particle's rotation will be animated along this :ref:`CurveTexture<class_CurveTexture>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_angle_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **angle_max** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_angle_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum initial rotation applied to each particle, in degrees.

Only applied when :ref:`particle_flag_disable_z<class_ParticleProcessMaterial_property_particle_flag_disable_z>` or :ref:`particle_flag_rotate_y<class_ParticleProcessMaterial_property_particle_flag_rotate_y>` are ``true`` or the :ref:`BaseMaterial3D<class_BaseMaterial3D>` being used to draw the particle is using :ref:`BaseMaterial3D.BILLBOARD_PARTICLES<class_BaseMaterial3D_constant_BILLBOARD_PARTICLES>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_angle_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **angle_min** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_angle_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum equivalent of :ref:`angle_max<class_ParticleProcessMaterial_property_angle_max>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_angular_velocity_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **angular_velocity_curve** :ref:`🔗<class_ParticleProcessMaterial_property_angular_velocity_curve>`

.. rst-class:: classref-property-setget

- |void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Each particle's angular velocity (rotation speed) will vary along this :ref:`CurveTexture<class_CurveTexture>` over its lifetime.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_angular_velocity_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **angular_velocity_max** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_angular_velocity_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum initial angular velocity (rotation speed) applied to each particle in *degrees* per second.

Only applied when :ref:`particle_flag_disable_z<class_ParticleProcessMaterial_property_particle_flag_disable_z>` or :ref:`particle_flag_rotate_y<class_ParticleProcessMaterial_property_particle_flag_rotate_y>` are ``true`` or the :ref:`BaseMaterial3D<class_BaseMaterial3D>` being used to draw the particle is using :ref:`BaseMaterial3D.BILLBOARD_PARTICLES<class_BaseMaterial3D_constant_BILLBOARD_PARTICLES>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_angular_velocity_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **angular_velocity_min** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_angular_velocity_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum equivalent of :ref:`angular_velocity_max<class_ParticleProcessMaterial_property_angular_velocity_max>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_anim_offset_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **anim_offset_curve** :ref:`🔗<class_ParticleProcessMaterial_property_anim_offset_curve>`

.. rst-class:: classref-property-setget

- |void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Each particle's animation offset will vary along this :ref:`CurveTexture<class_CurveTexture>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_anim_offset_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **anim_offset_max** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_anim_offset_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum animation offset that corresponds to frame index in the texture. ``0`` is the first frame, ``1`` is the last one. See :ref:`CanvasItemMaterial.particles_animation<class_CanvasItemMaterial_property_particles_animation>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_anim_offset_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **anim_offset_min** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_anim_offset_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum equivalent of :ref:`anim_offset_max<class_ParticleProcessMaterial_property_anim_offset_max>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_anim_speed_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **anim_speed_curve** :ref:`🔗<class_ParticleProcessMaterial_property_anim_speed_curve>`

.. rst-class:: classref-property-setget

- |void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Each particle's animation speed will vary along this :ref:`CurveTexture<class_CurveTexture>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_anim_speed_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **anim_speed_max** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_anim_speed_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum particle animation speed. Animation speed of ``1`` means that the particles will make full ``0`` to ``1`` offset cycle during lifetime, ``2`` means ``2`` cycles etc.

With animation speed greater than ``1``, remember to enable :ref:`CanvasItemMaterial.particles_anim_loop<class_CanvasItemMaterial_property_particles_anim_loop>` property if you want the animation to repeat.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_anim_speed_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **anim_speed_min** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_anim_speed_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum equivalent of :ref:`anim_speed_max<class_ParticleProcessMaterial_property_anim_speed_max>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_attractor_interaction_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **attractor_interaction_enabled** = ``true`` :ref:`🔗<class_ParticleProcessMaterial_property_attractor_interaction_enabled>`

.. rst-class:: classref-property-setget

- |void| **set_attractor_interaction_enabled**\ (\ value\: :ref:`bool<class_bool>`\ )
- :ref:`bool<class_bool>` **is_attractor_interaction_enabled**\ (\ )

If ``true``, interaction with particle attractors is enabled. In 3D, attraction only occurs within the area defined by the :ref:`GPUParticles3D<class_GPUParticles3D>` node's :ref:`GPUParticles3D.visibility_aabb<class_GPUParticles3D_property_visibility_aabb>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_collision_bounce:

.. rst-class:: classref-property

:ref:`float<class_float>` **collision_bounce** :ref:`🔗<class_ParticleProcessMaterial_property_collision_bounce>`

.. rst-class:: classref-property-setget

- |void| **set_collision_bounce**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_collision_bounce**\ (\ )

The particles' bounciness. Values range from ``0`` (no bounce) to ``1`` (full bounciness). Only effective if :ref:`collision_mode<class_ParticleProcessMaterial_property_collision_mode>` is :ref:`COLLISION_RIGID<class_ParticleProcessMaterial_constant_COLLISION_RIGID>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_collision_friction:

.. rst-class:: classref-property

:ref:`float<class_float>` **collision_friction** :ref:`🔗<class_ParticleProcessMaterial_property_collision_friction>`

.. rst-class:: classref-property-setget

- |void| **set_collision_friction**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_collision_friction**\ (\ )

The particles' friction. Values range from ``0`` (frictionless) to ``1`` (maximum friction). Only effective if :ref:`collision_mode<class_ParticleProcessMaterial_property_collision_mode>` is :ref:`COLLISION_RIGID<class_ParticleProcessMaterial_constant_COLLISION_RIGID>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_collision_mode:

.. rst-class:: classref-property

:ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` **collision_mode** = ``0`` :ref:`🔗<class_ParticleProcessMaterial_property_collision_mode>`

.. rst-class:: classref-property-setget

- |void| **set_collision_mode**\ (\ value\: :ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>`\ )
- :ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` **get_collision_mode**\ (\ )

The particles' collision mode.

\ **Note:** 3D Particles can only collide with :ref:`GPUParticlesCollision3D<class_GPUParticlesCollision3D>` nodes, not :ref:`PhysicsBody3D<class_PhysicsBody3D>` nodes. To make particles collide with various objects, you can add :ref:`GPUParticlesCollision3D<class_GPUParticlesCollision3D>` nodes as children of :ref:`PhysicsBody3D<class_PhysicsBody3D>` nodes. In 3D, collisions only occur within the area defined by the :ref:`GPUParticles3D<class_GPUParticles3D>` node's :ref:`GPUParticles3D.visibility_aabb<class_GPUParticles3D_property_visibility_aabb>`.

\ **Note:** 2D Particles can only collide with :ref:`LightOccluder2D<class_LightOccluder2D>` nodes, not :ref:`PhysicsBody2D<class_PhysicsBody2D>` nodes.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_collision_use_scale:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **collision_use_scale** = ``false`` :ref:`🔗<class_ParticleProcessMaterial_property_collision_use_scale>`

.. rst-class:: classref-property-setget

- |void| **set_collision_use_scale**\ (\ value\: :ref:`bool<class_bool>`\ )
- :ref:`bool<class_bool>` **is_collision_using_scale**\ (\ )

If ``true``, :ref:`GPUParticles3D.collision_base_size<class_GPUParticles3D_property_collision_base_size>` is multiplied by the particle's effective scale (see :ref:`scale_min<class_ParticleProcessMaterial_property_scale_min>`, :ref:`scale_max<class_ParticleProcessMaterial_property_scale_max>`, :ref:`scale_curve<class_ParticleProcessMaterial_property_scale_curve>`, and :ref:`scale_over_velocity_curve<class_ParticleProcessMaterial_property_scale_over_velocity_curve>`).

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_color:

.. rst-class:: classref-property

:ref:`Color<class_Color>` **color** = ``Color(1, 1, 1, 1)`` :ref:`🔗<class_ParticleProcessMaterial_property_color>`

.. rst-class:: classref-property-setget

- |void| **set_color**\ (\ value\: :ref:`Color<class_Color>`\ )
- :ref:`Color<class_Color>` **get_color**\ (\ )

Each particle's initial color. If the :ref:`GPUParticles2D<class_GPUParticles2D>`'s ``texture`` is defined, it will be multiplied by this color.

\ **Note:** :ref:`color<class_ParticleProcessMaterial_property_color>` multiplies the particle mesh's vertex colors. To have a visible effect on a :ref:`BaseMaterial3D<class_BaseMaterial3D>`, :ref:`BaseMaterial3D.vertex_color_use_as_albedo<class_BaseMaterial3D_property_vertex_color_use_as_albedo>` *must* be ``true``. For a :ref:`ShaderMaterial<class_ShaderMaterial>`, ``ALBEDO *= COLOR.rgb;`` must be inserted in the shader's ``fragment()`` function. Otherwise, :ref:`color<class_ParticleProcessMaterial_property_color>` will have no visible effect.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_color_initial_ramp:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **color_initial_ramp** :ref:`🔗<class_ParticleProcessMaterial_property_color_initial_ramp>`

.. rst-class:: classref-property-setget

- |void| **set_color_initial_ramp**\ (\ value\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_color_initial_ramp**\ (\ )

Each particle's initial color will vary along this :ref:`GradientTexture1D<class_GradientTexture1D>` (multiplied with :ref:`color<class_ParticleProcessMaterial_property_color>`).

\ **Note:** :ref:`color_initial_ramp<class_ParticleProcessMaterial_property_color_initial_ramp>` multiplies the particle mesh's vertex colors. To have a visible effect on a :ref:`BaseMaterial3D<class_BaseMaterial3D>`, :ref:`BaseMaterial3D.vertex_color_use_as_albedo<class_BaseMaterial3D_property_vertex_color_use_as_albedo>` *must* be ``true``. For a :ref:`ShaderMaterial<class_ShaderMaterial>`, ``ALBEDO *= COLOR.rgb;`` must be inserted in the shader's ``fragment()`` function. Otherwise, :ref:`color_initial_ramp<class_ParticleProcessMaterial_property_color_initial_ramp>` will have no visible effect.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_color_ramp:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **color_ramp** :ref:`🔗<class_ParticleProcessMaterial_property_color_ramp>`

.. rst-class:: classref-property-setget

- |void| **set_color_ramp**\ (\ value\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_color_ramp**\ (\ )

Each particle's color will vary along this :ref:`GradientTexture1D<class_GradientTexture1D>` over its lifetime (multiplied with :ref:`color<class_ParticleProcessMaterial_property_color>`).

\ **Note:** :ref:`color_ramp<class_ParticleProcessMaterial_property_color_ramp>` multiplies the particle mesh's vertex colors. To have a visible effect on a :ref:`BaseMaterial3D<class_BaseMaterial3D>`, :ref:`BaseMaterial3D.vertex_color_use_as_albedo<class_BaseMaterial3D_property_vertex_color_use_as_albedo>` *must* be ``true``. For a :ref:`ShaderMaterial<class_ShaderMaterial>`, ``ALBEDO *= COLOR.rgb;`` must be inserted in the shader's ``fragment()`` function. Otherwise, :ref:`color_ramp<class_ParticleProcessMaterial_property_color_ramp>` will have no visible effect.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_damping_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **damping_curve** :ref:`🔗<class_ParticleProcessMaterial_property_damping_curve>`

.. rst-class:: classref-property-setget

- |void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Damping will vary along this :ref:`CurveTexture<class_CurveTexture>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_damping_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **damping_max** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_damping_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

The maximum rate at which particles lose velocity. For example value of ``100`` means that the particle will go from ``100`` velocity to ``0`` in ``1`` second.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_damping_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **damping_min** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_damping_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum equivalent of :ref:`damping_max<class_ParticleProcessMaterial_property_damping_max>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_direction:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **direction** = ``Vector3(1, 0, 0)`` :ref:`🔗<class_ParticleProcessMaterial_property_direction>`

.. rst-class:: classref-property-setget

- |void| **set_direction**\ (\ value\: :ref:`Vector3<class_Vector3>`\ )
- :ref:`Vector3<class_Vector3>` **get_direction**\ (\ )

Unit vector specifying the particles' emission direction.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_directional_velocity_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **directional_velocity_curve** :ref:`🔗<class_ParticleProcessMaterial_property_directional_velocity_curve>`

.. rst-class:: classref-property-setget

- |void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

A curve that specifies the velocity along each of the axes of the particle system along its lifetime.

\ **Note:** Animated velocities will not be affected by damping, use :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` instead.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_directional_velocity_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **directional_velocity_max** :ref:`🔗<class_ParticleProcessMaterial_property_directional_velocity_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum directional velocity value, which is multiplied by :ref:`directional_velocity_curve<class_ParticleProcessMaterial_property_directional_velocity_curve>`.

\ **Note:** Animated velocities will not be affected by damping, use :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` instead.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_directional_velocity_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **directional_velocity_min** :ref:`🔗<class_ParticleProcessMaterial_property_directional_velocity_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum directional velocity value, which is multiplied by :ref:`directional_velocity_curve<class_ParticleProcessMaterial_property_directional_velocity_curve>`.

\ **Note:** Animated velocities will not be affected by damping, use :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` instead.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_box_extents:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **emission_box_extents** :ref:`🔗<class_ParticleProcessMaterial_property_emission_box_extents>`

.. rst-class:: classref-property-setget

- |void| **set_emission_box_extents**\ (\ value\: :ref:`Vector3<class_Vector3>`\ )
- :ref:`Vector3<class_Vector3>` **get_emission_box_extents**\ (\ )

The box's extents if :ref:`emission_shape<class_ParticleProcessMaterial_property_emission_shape>` is set to :ref:`EMISSION_SHAPE_BOX<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_BOX>`.

\ **Note:** :ref:`emission_box_extents<class_ParticleProcessMaterial_property_emission_box_extents>` starts from the center point and applies the X, Y, and Z values in both directions. The size is twice the area of the extents.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_color_texture:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **emission_color_texture** :ref:`🔗<class_ParticleProcessMaterial_property_emission_color_texture>`

.. rst-class:: classref-property-setget

- |void| **set_emission_color_texture**\ (\ value\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_emission_color_texture**\ (\ )

Particle color will be modulated by color determined by sampling this texture at the same point as the :ref:`emission_point_texture<class_ParticleProcessMaterial_property_emission_point_texture>`.

\ **Note:** :ref:`emission_color_texture<class_ParticleProcessMaterial_property_emission_color_texture>` multiplies the particle mesh's vertex colors. To have a visible effect on a :ref:`BaseMaterial3D<class_BaseMaterial3D>`, :ref:`BaseMaterial3D.vertex_color_use_as_albedo<class_BaseMaterial3D_property_vertex_color_use_as_albedo>` *must* be ``true``. For a :ref:`ShaderMaterial<class_ShaderMaterial>`, ``ALBEDO *= COLOR.rgb;`` must be inserted in the shader's ``fragment()`` function. Otherwise, :ref:`emission_color_texture<class_ParticleProcessMaterial_property_emission_color_texture>` will have no visible effect.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **emission_curve** :ref:`🔗<class_ParticleProcessMaterial_property_emission_curve>`

.. rst-class:: classref-property-setget

- |void| **set_emission_curve**\ (\ value\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_emission_curve**\ (\ )

Each particle's color will be multiplied by this :ref:`CurveTexture<class_CurveTexture>` over its lifetime.

\ **Note:** :ref:`emission_curve<class_ParticleProcessMaterial_property_emission_curve>` multiplies the particle mesh's vertex colors. To have a visible effect on a :ref:`BaseMaterial3D<class_BaseMaterial3D>`, :ref:`BaseMaterial3D.vertex_color_use_as_albedo<class_BaseMaterial3D_property_vertex_color_use_as_albedo>` *must* be ``true``. For a :ref:`ShaderMaterial<class_ShaderMaterial>`, ``ALBEDO *= COLOR.rgb;`` must be inserted in the shader's ``fragment()`` function. Otherwise, :ref:`emission_curve<class_ParticleProcessMaterial_property_emission_curve>` will have no visible effect.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_normal_texture:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **emission_normal_texture** :ref:`🔗<class_ParticleProcessMaterial_property_emission_normal_texture>`

.. rst-class:: classref-property-setget

- |void| **set_emission_normal_texture**\ (\ value\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_emission_normal_texture**\ (\ )

Particle velocity and rotation will be set by sampling this texture at the same point as the :ref:`emission_point_texture<class_ParticleProcessMaterial_property_emission_point_texture>`. Used only in :ref:`EMISSION_SHAPE_DIRECTED_POINTS<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_DIRECTED_POINTS>`. Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_point_count:

.. rst-class:: classref-property

:ref:`int<class_int>` **emission_point_count** :ref:`🔗<class_ParticleProcessMaterial_property_emission_point_count>`

.. rst-class:: classref-property-setget

- |void| **set_emission_point_count**\ (\ value\: :ref:`int<class_int>`\ )
- :ref:`int<class_int>` **get_emission_point_count**\ (\ )

The number of emission points if :ref:`emission_shape<class_ParticleProcessMaterial_property_emission_shape>` is set to :ref:`EMISSION_SHAPE_POINTS<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_POINTS>` or :ref:`EMISSION_SHAPE_DIRECTED_POINTS<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_DIRECTED_POINTS>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_point_texture:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **emission_point_texture** :ref:`🔗<class_ParticleProcessMaterial_property_emission_point_texture>`

.. rst-class:: classref-property-setget

- |void| **set_emission_point_texture**\ (\ value\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_emission_point_texture**\ (\ )

Particles will be emitted at positions determined by sampling this texture at a random position. Used with :ref:`EMISSION_SHAPE_POINTS<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_POINTS>` and :ref:`EMISSION_SHAPE_DIRECTED_POINTS<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_DIRECTED_POINTS>`. Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_ring_axis:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **emission_ring_axis** :ref:`🔗<class_ParticleProcessMaterial_property_emission_ring_axis>`

.. rst-class:: classref-property-setget

- |void| **set_emission_ring_axis**\ (\ value\: :ref:`Vector3<class_Vector3>`\ )
- :ref:`Vector3<class_Vector3>` **get_emission_ring_axis**\ (\ )

The axis of the ring when using the emitter :ref:`EMISSION_SHAPE_RING<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_ring_cone_angle:

.. rst-class:: classref-property

:ref:`float<class_float>` **emission_ring_cone_angle** :ref:`🔗<class_ParticleProcessMaterial_property_emission_ring_cone_angle>`

.. rst-class:: classref-property-setget

- |void| **set_emission_ring_cone_angle**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_emission_ring_cone_angle**\ (\ )

The angle of the cone when using the emitter :ref:`EMISSION_SHAPE_RING<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING>`. The default angle of 90 degrees results in a ring, while an angle of 0 degrees results in a cone. Intermediate values will result in a ring where one end is larger than the other.

\ **Note:** Depending on :ref:`emission_ring_height<class_ParticleProcessMaterial_property_emission_ring_height>`, the angle may be clamped if the ring's end is reached to form a perfect cone.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_ring_height:

.. rst-class:: classref-property

:ref:`float<class_float>` **emission_ring_height** :ref:`🔗<class_ParticleProcessMaterial_property_emission_ring_height>`

.. rst-class:: classref-property-setget

- |void| **set_emission_ring_height**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_emission_ring_height**\ (\ )

The height of the ring when using the emitter :ref:`EMISSION_SHAPE_RING<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_ring_inner_radius:

.. rst-class:: classref-property

:ref:`float<class_float>` **emission_ring_inner_radius** :ref:`🔗<class_ParticleProcessMaterial_property_emission_ring_inner_radius>`

.. rst-class:: classref-property-setget

- |void| **set_emission_ring_inner_radius**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_emission_ring_inner_radius**\ (\ )

The inner radius of the ring when using the emitter :ref:`EMISSION_SHAPE_RING<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_ring_radius:

.. rst-class:: classref-property

:ref:`float<class_float>` **emission_ring_radius** :ref:`🔗<class_ParticleProcessMaterial_property_emission_ring_radius>`

.. rst-class:: classref-property-setget

- |void| **set_emission_ring_radius**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_emission_ring_radius**\ (\ )

The radius of the ring when using the emitter :ref:`EMISSION_SHAPE_RING<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_shape:

.. rst-class:: classref-property

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **emission_shape** = ``0`` :ref:`🔗<class_ParticleProcessMaterial_property_emission_shape>`

.. rst-class:: classref-property-setget

- |void| **set_emission_shape**\ (\ value\: :ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>`\ )
- :ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **get_emission_shape**\ (\ )

Particles will be emitted inside this region. Use :ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` constants for values.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_shape_offset:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **emission_shape_offset** = ``Vector3(0, 0, 0)`` :ref:`🔗<class_ParticleProcessMaterial_property_emission_shape_offset>`

.. rst-class:: classref-property-setget

- |void| **set_emission_shape_offset**\ (\ value\: :ref:`Vector3<class_Vector3>`\ )
- :ref:`Vector3<class_Vector3>` **get_emission_shape_offset**\ (\ )

The offset for the :ref:`emission_shape<class_ParticleProcessMaterial_property_emission_shape>`, in local space.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_shape_scale:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **emission_shape_scale** = ``Vector3(1, 1, 1)`` :ref:`🔗<class_ParticleProcessMaterial_property_emission_shape_scale>`

.. rst-class:: classref-property-setget

- |void| **set_emission_shape_scale**\ (\ value\: :ref:`Vector3<class_Vector3>`\ )
- :ref:`Vector3<class_Vector3>` **get_emission_shape_scale**\ (\ )

The scale of the :ref:`emission_shape<class_ParticleProcessMaterial_property_emission_shape>`, in local space.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_sphere_radius:

.. rst-class:: classref-property

:ref:`float<class_float>` **emission_sphere_radius** :ref:`🔗<class_ParticleProcessMaterial_property_emission_sphere_radius>`

.. rst-class:: classref-property-setget

- |void| **set_emission_sphere_radius**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_emission_sphere_radius**\ (\ )

The sphere's radius if :ref:`emission_shape<class_ParticleProcessMaterial_property_emission_shape>` is set to :ref:`EMISSION_SHAPE_SPHERE<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_SPHERE>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_flatness:

.. rst-class:: classref-property

:ref:`float<class_float>` **flatness** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_flatness>`

.. rst-class:: classref-property-setget

- |void| **set_flatness**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_flatness**\ (\ )

Amount of :ref:`spread<class_ParticleProcessMaterial_property_spread>` along the Y axis.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_gravity:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **gravity** = ``Vector3(0, -9.8, 0)`` :ref:`🔗<class_ParticleProcessMaterial_property_gravity>`

.. rst-class:: classref-property-setget

- |void| **set_gravity**\ (\ value\: :ref:`Vector3<class_Vector3>`\ )
- :ref:`Vector3<class_Vector3>` **get_gravity**\ (\ )

Gravity applied to every particle.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_hue_variation_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **hue_variation_curve** :ref:`🔗<class_ParticleProcessMaterial_property_hue_variation_curve>`

.. rst-class:: classref-property-setget

- |void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Each particle's hue will vary along this :ref:`CurveTexture<class_CurveTexture>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_hue_variation_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **hue_variation_max** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_hue_variation_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum initial hue variation applied to each particle. It will shift the particle color's hue.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_hue_variation_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **hue_variation_min** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_hue_variation_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum equivalent of :ref:`hue_variation_max<class_ParticleProcessMaterial_property_hue_variation_max>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_inherit_velocity_ratio:

.. rst-class:: classref-property

:ref:`float<class_float>` **inherit_velocity_ratio** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_inherit_velocity_ratio>`

.. rst-class:: classref-property-setget

- |void| **set_inherit_velocity_ratio**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_inherit_velocity_ratio**\ (\ )

Percentage of the velocity of the respective :ref:`GPUParticles2D<class_GPUParticles2D>` or :ref:`GPUParticles3D<class_GPUParticles3D>` inherited by each particle when spawning.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_initial_velocity_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **initial_velocity_max** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_initial_velocity_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum initial velocity magnitude for each particle. Direction comes from :ref:`direction<class_ParticleProcessMaterial_property_direction>` and :ref:`spread<class_ParticleProcessMaterial_property_spread>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_initial_velocity_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **initial_velocity_min** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_initial_velocity_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum equivalent of :ref:`initial_velocity_max<class_ParticleProcessMaterial_property_initial_velocity_max>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_lifetime_randomness:

.. rst-class:: classref-property

:ref:`float<class_float>` **lifetime_randomness** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_lifetime_randomness>`

.. rst-class:: classref-property-setget

- |void| **set_lifetime_randomness**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_lifetime_randomness**\ (\ )

Particle lifetime randomness ratio. The equation for the lifetime of a particle is ``lifetime * (1.0 - randf() * lifetime_randomness)``. For example, a :ref:`lifetime_randomness<class_ParticleProcessMaterial_property_lifetime_randomness>` of ``0.4`` scales the lifetime between ``0.6`` to ``1.0`` of its original value.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_linear_accel_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **linear_accel_curve** :ref:`🔗<class_ParticleProcessMaterial_property_linear_accel_curve>`

.. rst-class:: classref-property-setget

- |void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Each particle's linear acceleration will vary along this :ref:`CurveTexture<class_CurveTexture>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_linear_accel_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **linear_accel_max** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_linear_accel_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum linear acceleration applied to each particle in the direction of motion.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_linear_accel_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **linear_accel_min** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_linear_accel_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum equivalent of :ref:`linear_accel_max<class_ParticleProcessMaterial_property_linear_accel_max>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_orbit_velocity_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **orbit_velocity_curve** :ref:`🔗<class_ParticleProcessMaterial_property_orbit_velocity_curve>`

.. rst-class:: classref-property-setget

- |void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Each particle's orbital velocity will vary along this :ref:`CurveTexture<class_CurveTexture>`.

\ **Note:** For 3D orbital velocity, use a :ref:`CurveXYZTexture<class_CurveXYZTexture>`.

\ **Note:** Animated velocities will not be affected by damping, use :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` instead.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_orbit_velocity_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **orbit_velocity_max** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_orbit_velocity_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum orbital velocity applied to each particle. Makes the particles circle around origin. Specified in number of full rotations around origin per second.

\ **Note:** Animated velocities will not be affected by damping, use :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` instead.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_orbit_velocity_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **orbit_velocity_min** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_orbit_velocity_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum equivalent of :ref:`orbit_velocity_max<class_ParticleProcessMaterial_property_orbit_velocity_max>`.

\ **Note:** Animated velocities will not be affected by damping, use :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` instead.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_particle_flag_align_y:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **particle_flag_align_y** = ``false`` :ref:`🔗<class_ParticleProcessMaterial_property_particle_flag_align_y>`

.. rst-class:: classref-property-setget

- |void| **set_particle_flag**\ (\ particle_flag\: :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>`, enable\: :ref:`bool<class_bool>`\ )
- :ref:`bool<class_bool>` **get_particle_flag**\ (\ particle_flag\: :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>`\ ) |const|

Align Y axis of particle with the direction of its velocity.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_particle_flag_damping_as_friction:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **particle_flag_damping_as_friction** = ``false`` :ref:`🔗<class_ParticleProcessMaterial_property_particle_flag_damping_as_friction>`

.. rst-class:: classref-property-setget

- |void| **set_particle_flag**\ (\ particle_flag\: :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>`, enable\: :ref:`bool<class_bool>`\ )
- :ref:`bool<class_bool>` **get_particle_flag**\ (\ particle_flag\: :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>`\ ) |const|

Changes the behavior of the damping properties from a linear deceleration to a deceleration based on speed percentage.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_particle_flag_disable_z:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **particle_flag_disable_z** = ``false`` :ref:`🔗<class_ParticleProcessMaterial_property_particle_flag_disable_z>`

.. rst-class:: classref-property-setget

- |void| **set_particle_flag**\ (\ particle_flag\: :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>`, enable\: :ref:`bool<class_bool>`\ )
- :ref:`bool<class_bool>` **get_particle_flag**\ (\ particle_flag\: :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>`\ ) |const|

If ``true``, particles will not move on the z axis.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_particle_flag_rotate_y:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **particle_flag_rotate_y** = ``false`` :ref:`🔗<class_ParticleProcessMaterial_property_particle_flag_rotate_y>`

.. rst-class:: classref-property-setget

- |void| **set_particle_flag**\ (\ particle_flag\: :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>`, enable\: :ref:`bool<class_bool>`\ )
- :ref:`bool<class_bool>` **get_particle_flag**\ (\ particle_flag\: :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>`\ ) |const|

If ``true``, particles rotate around Y axis by :ref:`angle_min<class_ParticleProcessMaterial_property_angle_min>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_radial_accel_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **radial_accel_curve** :ref:`🔗<class_ParticleProcessMaterial_property_radial_accel_curve>`

.. rst-class:: classref-property-setget

- |void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Each particle's radial acceleration will vary along this :ref:`CurveTexture<class_CurveTexture>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_radial_accel_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **radial_accel_max** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_radial_accel_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum radial acceleration applied to each particle. Makes particle accelerate away from the origin or towards it if negative.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_radial_accel_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **radial_accel_min** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_radial_accel_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum equivalent of :ref:`radial_accel_max<class_ParticleProcessMaterial_property_radial_accel_max>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_radial_velocity_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **radial_velocity_curve** :ref:`🔗<class_ParticleProcessMaterial_property_radial_velocity_curve>`

.. rst-class:: classref-property-setget

- |void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

A :ref:`CurveTexture<class_CurveTexture>` that defines the velocity over the particle's lifetime away (or toward) the :ref:`velocity_pivot<class_ParticleProcessMaterial_property_velocity_pivot>`.

\ **Note:** Animated velocities will not be affected by damping, use :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` instead.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_radial_velocity_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **radial_velocity_max** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_radial_velocity_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum radial velocity applied to each particle. Makes particles move away from the :ref:`velocity_pivot<class_ParticleProcessMaterial_property_velocity_pivot>`, or toward it if negative.

\ **Note:** Animated velocities will not be affected by damping, use :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` instead.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_radial_velocity_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **radial_velocity_min** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_radial_velocity_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum radial velocity applied to each particle. Makes particles move away from the :ref:`velocity_pivot<class_ParticleProcessMaterial_property_velocity_pivot>`, or toward it if negative.

\ **Note:** Animated velocities will not be affected by damping, use :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` instead.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_scale_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **scale_curve** :ref:`🔗<class_ParticleProcessMaterial_property_scale_curve>`

.. rst-class:: classref-property-setget

- |void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Each particle's scale will vary along this :ref:`CurveTexture<class_CurveTexture>` over its lifetime. If a :ref:`CurveXYZTexture<class_CurveXYZTexture>` is supplied instead, the scale will be separated per-axis.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_scale_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **scale_max** = ``1.0`` :ref:`🔗<class_ParticleProcessMaterial_property_scale_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum initial scale applied to each particle.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_scale_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **scale_min** = ``1.0`` :ref:`🔗<class_ParticleProcessMaterial_property_scale_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum equivalent of :ref:`scale_max<class_ParticleProcessMaterial_property_scale_max>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_scale_over_velocity_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **scale_over_velocity_curve** :ref:`🔗<class_ParticleProcessMaterial_property_scale_over_velocity_curve>`

.. rst-class:: classref-property-setget

- |void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Either a :ref:`CurveTexture<class_CurveTexture>` or a :ref:`CurveXYZTexture<class_CurveXYZTexture>` that scales each particle based on its velocity.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_scale_over_velocity_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **scale_over_velocity_max** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_scale_over_velocity_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum velocity value reference for :ref:`scale_over_velocity_curve<class_ParticleProcessMaterial_property_scale_over_velocity_curve>`.

\ :ref:`scale_over_velocity_curve<class_ParticleProcessMaterial_property_scale_over_velocity_curve>` will be interpolated between :ref:`scale_over_velocity_min<class_ParticleProcessMaterial_property_scale_over_velocity_min>` and :ref:`scale_over_velocity_max<class_ParticleProcessMaterial_property_scale_over_velocity_max>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_scale_over_velocity_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **scale_over_velocity_min** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_scale_over_velocity_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum velocity value reference for :ref:`scale_over_velocity_curve<class_ParticleProcessMaterial_property_scale_over_velocity_curve>`.

\ :ref:`scale_over_velocity_curve<class_ParticleProcessMaterial_property_scale_over_velocity_curve>` will be interpolated between :ref:`scale_over_velocity_min<class_ParticleProcessMaterial_property_scale_over_velocity_min>` and :ref:`scale_over_velocity_max<class_ParticleProcessMaterial_property_scale_over_velocity_max>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_spread:

.. rst-class:: classref-property

:ref:`float<class_float>` **spread** = ``45.0`` :ref:`🔗<class_ParticleProcessMaterial_property_spread>`

.. rst-class:: classref-property-setget

- |void| **set_spread**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_spread**\ (\ )

Each particle's initial direction range from ``+spread`` to ``-spread`` degrees.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_sub_emitter_amount_at_collision:

.. rst-class:: classref-property

:ref:`int<class_int>` **sub_emitter_amount_at_collision** :ref:`🔗<class_ParticleProcessMaterial_property_sub_emitter_amount_at_collision>`

.. rst-class:: classref-property-setget

- |void| **set_sub_emitter_amount_at_collision**\ (\ value\: :ref:`int<class_int>`\ )
- :ref:`int<class_int>` **get_sub_emitter_amount_at_collision**\ (\ )

The amount of particles to spawn from the subemitter node when a collision occurs. When combined with :ref:`COLLISION_HIDE_ON_CONTACT<class_ParticleProcessMaterial_constant_COLLISION_HIDE_ON_CONTACT>` on the main particles material, this can be used to achieve effects such as raindrops hitting the ground.

\ **Note:** This value shouldn't exceed :ref:`GPUParticles2D.amount<class_GPUParticles2D_property_amount>` or :ref:`GPUParticles3D.amount<class_GPUParticles3D_property_amount>` defined on the *subemitter node* (not the main node), relative to the subemitter's particle lifetime. If the number of particles is exceeded, no new particles will spawn from the subemitter until enough particles have expired.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_sub_emitter_amount_at_end:

.. rst-class:: classref-property

:ref:`int<class_int>` **sub_emitter_amount_at_end** :ref:`🔗<class_ParticleProcessMaterial_property_sub_emitter_amount_at_end>`

.. rst-class:: classref-property-setget

- |void| **set_sub_emitter_amount_at_end**\ (\ value\: :ref:`int<class_int>`\ )
- :ref:`int<class_int>` **get_sub_emitter_amount_at_end**\ (\ )

The amount of particles to spawn from the subemitter node when the particle expires.

\ **Note:** This value shouldn't exceed :ref:`GPUParticles2D.amount<class_GPUParticles2D_property_amount>` or :ref:`GPUParticles3D.amount<class_GPUParticles3D_property_amount>` defined on the *subemitter node* (not the main node), relative to the subemitter's particle lifetime. If the number of particles is exceeded, no new particles will spawn from the subemitter until enough particles have expired.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_sub_emitter_frequency:

.. rst-class:: classref-property

:ref:`float<class_float>` **sub_emitter_frequency** :ref:`🔗<class_ParticleProcessMaterial_property_sub_emitter_frequency>`

.. rst-class:: classref-property-setget

- |void| **set_sub_emitter_frequency**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_sub_emitter_frequency**\ (\ )

The frequency at which particles should be emitted from the subemitter node. One particle will be spawned every :ref:`sub_emitter_frequency<class_ParticleProcessMaterial_property_sub_emitter_frequency>` seconds.

\ **Note:** This value shouldn't exceed :ref:`GPUParticles2D.amount<class_GPUParticles2D_property_amount>` or :ref:`GPUParticles3D.amount<class_GPUParticles3D_property_amount>` defined on the *subemitter node* (not the main node), relative to the subemitter's particle lifetime. If the number of particles is exceeded, no new particles will spawn from the subemitter until enough particles have expired.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_sub_emitter_keep_velocity:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **sub_emitter_keep_velocity** = ``false`` :ref:`🔗<class_ParticleProcessMaterial_property_sub_emitter_keep_velocity>`

.. rst-class:: classref-property-setget

- |void| **set_sub_emitter_keep_velocity**\ (\ value\: :ref:`bool<class_bool>`\ )
- :ref:`bool<class_bool>` **get_sub_emitter_keep_velocity**\ (\ )

If ``true``, the subemitter inherits the parent particle's velocity when it spawns.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_sub_emitter_mode:

.. rst-class:: classref-property

:ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` **sub_emitter_mode** = ``0`` :ref:`🔗<class_ParticleProcessMaterial_property_sub_emitter_mode>`

.. rst-class:: classref-property-setget

- |void| **set_sub_emitter_mode**\ (\ value\: :ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>`\ )
- :ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` **get_sub_emitter_mode**\ (\ )

The particle subemitter mode (see :ref:`GPUParticles2D.sub_emitter<class_GPUParticles2D_property_sub_emitter>` and :ref:`GPUParticles3D.sub_emitter<class_GPUParticles3D_property_sub_emitter>`).

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_tangential_accel_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **tangential_accel_curve** :ref:`🔗<class_ParticleProcessMaterial_property_tangential_accel_curve>`

.. rst-class:: classref-property-setget

- |void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Each particle's tangential acceleration will vary along this :ref:`CurveTexture<class_CurveTexture>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_tangential_accel_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **tangential_accel_max** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_tangential_accel_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_tangential_accel_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **tangential_accel_min** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_tangential_accel_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum equivalent of :ref:`tangential_accel_max<class_ParticleProcessMaterial_property_tangential_accel_max>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **turbulence_enabled** = ``false`` :ref:`🔗<class_ParticleProcessMaterial_property_turbulence_enabled>`

.. rst-class:: classref-property-setget

- |void| **set_turbulence_enabled**\ (\ value\: :ref:`bool<class_bool>`\ )
- :ref:`bool<class_bool>` **get_turbulence_enabled**\ (\ )

If ``true``, enables turbulence for the particle system. Turbulence can be used to vary particle movement according to its position (based on a 3D noise pattern). In 3D, :ref:`GPUParticlesAttractorVectorField3D<class_GPUParticlesAttractorVectorField3D>` with :ref:`NoiseTexture3D<class_NoiseTexture3D>` can be used as an alternative to turbulence that works in world space and with multiple particle systems reacting in the same way.

\ **Note:** Enabling turbulence has a high performance cost on the GPU. Only enable turbulence on a few particle systems at once at most, and consider disabling it when targeting mobile/web platforms.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_influence_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **turbulence_influence_max** = ``0.1`` :ref:`🔗<class_ParticleProcessMaterial_property_turbulence_influence_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum turbulence influence on each particle.

The actual amount of turbulence influence on each particle is calculated as a random value between :ref:`turbulence_influence_min<class_ParticleProcessMaterial_property_turbulence_influence_min>` and :ref:`turbulence_influence_max<class_ParticleProcessMaterial_property_turbulence_influence_max>` and multiplied by the amount of turbulence influence from :ref:`turbulence_influence_over_life<class_ParticleProcessMaterial_property_turbulence_influence_over_life>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_influence_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **turbulence_influence_min** = ``0.1`` :ref:`🔗<class_ParticleProcessMaterial_property_turbulence_influence_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum turbulence influence on each particle.

The actual amount of turbulence influence on each particle is calculated as a random value between :ref:`turbulence_influence_min<class_ParticleProcessMaterial_property_turbulence_influence_min>` and :ref:`turbulence_influence_max<class_ParticleProcessMaterial_property_turbulence_influence_max>` and multiplied by the amount of turbulence influence from :ref:`turbulence_influence_over_life<class_ParticleProcessMaterial_property_turbulence_influence_over_life>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_influence_over_life:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **turbulence_influence_over_life** :ref:`🔗<class_ParticleProcessMaterial_property_turbulence_influence_over_life>`

.. rst-class:: classref-property-setget

- |void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Each particle's amount of turbulence will be influenced along this :ref:`CurveTexture<class_CurveTexture>` over its life time.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_initial_displacement_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **turbulence_initial_displacement_max** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_turbulence_initial_displacement_max>`

.. rst-class:: classref-property-setget

- |void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Maximum displacement of each particle's spawn position by the turbulence.

The actual amount of displacement will be a factor of the underlying turbulence multiplied by a random value between :ref:`turbulence_initial_displacement_min<class_ParticleProcessMaterial_property_turbulence_initial_displacement_min>` and :ref:`turbulence_initial_displacement_max<class_ParticleProcessMaterial_property_turbulence_initial_displacement_max>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_initial_displacement_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **turbulence_initial_displacement_min** = ``0.0`` :ref:`🔗<class_ParticleProcessMaterial_property_turbulence_initial_displacement_min>`

.. rst-class:: classref-property-setget

- |void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const|

Minimum displacement of each particle's spawn position by the turbulence.

The actual amount of displacement will be a factor of the underlying turbulence multiplied by a random value between :ref:`turbulence_initial_displacement_min<class_ParticleProcessMaterial_property_turbulence_initial_displacement_min>` and :ref:`turbulence_initial_displacement_max<class_ParticleProcessMaterial_property_turbulence_initial_displacement_max>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_noise_scale:

.. rst-class:: classref-property

:ref:`float<class_float>` **turbulence_noise_scale** = ``9.0`` :ref:`🔗<class_ParticleProcessMaterial_property_turbulence_noise_scale>`

.. rst-class:: classref-property-setget

- |void| **set_turbulence_noise_scale**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_turbulence_noise_scale**\ (\ )

This value controls the overall scale/frequency of the turbulence noise pattern.

A small scale will result in smaller features with more detail while a high scale will result in smoother noise with larger features.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_noise_speed:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **turbulence_noise_speed** = ``Vector3(0, 0, 0)`` :ref:`🔗<class_ParticleProcessMaterial_property_turbulence_noise_speed>`

.. rst-class:: classref-property-setget

- |void| **set_turbulence_noise_speed**\ (\ value\: :ref:`Vector3<class_Vector3>`\ )
- :ref:`Vector3<class_Vector3>` **get_turbulence_noise_speed**\ (\ )

A scrolling velocity for the turbulence field. This sets a directional trend for the pattern to move in over time.

The default value of ``Vector3(0, 0, 0)`` turns off the scrolling.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_noise_speed_random:

.. rst-class:: classref-property

:ref:`float<class_float>` **turbulence_noise_speed_random** = ``0.2`` :ref:`🔗<class_ParticleProcessMaterial_property_turbulence_noise_speed_random>`

.. rst-class:: classref-property-setget

- |void| **set_turbulence_noise_speed_random**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_turbulence_noise_speed_random**\ (\ )

The in-place rate of change of the turbulence field. This defines how quickly the noise pattern varies over time.

A value of 0.0 will result in a fixed pattern.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_noise_strength:

.. rst-class:: classref-property

:ref:`float<class_float>` **turbulence_noise_strength** = ``1.0`` :ref:`🔗<class_ParticleProcessMaterial_property_turbulence_noise_strength>`

.. rst-class:: classref-property-setget

- |void| **set_turbulence_noise_strength**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_turbulence_noise_strength**\ (\ )

The turbulence noise strength. Increasing this will result in a stronger, more contrasting, flow pattern.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_velocity_limit_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **velocity_limit_curve** :ref:`🔗<class_ParticleProcessMaterial_property_velocity_limit_curve>`

.. rst-class:: classref-property-setget

- |void| **set_velocity_limit_curve**\ (\ value\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_velocity_limit_curve**\ (\ )

A :ref:`CurveTexture<class_CurveTexture>` that defines the maximum velocity of a particle during its lifetime.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_velocity_pivot:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **velocity_pivot** = ``Vector3(0, 0, 0)`` :ref:`🔗<class_ParticleProcessMaterial_property_velocity_pivot>`

.. rst-class:: classref-property-setget

- |void| **set_velocity_pivot**\ (\ value\: :ref:`Vector3<class_Vector3>`\ )
- :ref:`Vector3<class_Vector3>` **get_velocity_pivot**\ (\ )

A pivot point used to calculate radial and orbital velocity of particles.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_ParticleProcessMaterial_method_get_param:

.. rst-class:: classref-method

:ref:`Vector2<class_Vector2>` **get_param**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const| :ref:`🔗<class_ParticleProcessMaterial_method_get_param>`

Returns the minimum and maximum values of the given ``param`` as a vector.

The ``x`` component of the returned vector corresponds to minimum and the ``y`` component corresponds to maximum.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_get_param_max:

.. rst-class:: classref-method

:ref:`float<class_float>` **get_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const| :ref:`🔗<class_ParticleProcessMaterial_method_get_param_max>`

Returns the maximum value range for the given parameter.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_get_param_min:

.. rst-class:: classref-method

:ref:`float<class_float>` **get_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const| :ref:`🔗<class_ParticleProcessMaterial_method_get_param_min>`

Returns the minimum value range for the given parameter.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_get_param_texture:

.. rst-class:: classref-method

:ref:`Texture2D<class_Texture2D>` **get_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`\ ) |const| :ref:`🔗<class_ParticleProcessMaterial_method_get_param_texture>`

Returns the :ref:`Texture2D<class_Texture2D>` used by the specified parameter.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_get_particle_flag:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **get_particle_flag**\ (\ particle_flag\: :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>`\ ) |const| :ref:`🔗<class_ParticleProcessMaterial_method_get_particle_flag>`

Returns ``true`` if the specified particle flag is enabled. See :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` for options.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_set_param:

.. rst-class:: classref-method

|void| **set_param**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`Vector2<class_Vector2>`\ ) :ref:`🔗<class_ParticleProcessMaterial_method_set_param>`

Sets the minimum and maximum values of the given ``param``.

The ``x`` component of the argument vector corresponds to minimum and the ``y`` component corresponds to maximum.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_set_param_max:

.. rst-class:: classref-method

|void| **set_param_max**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ ) :ref:`🔗<class_ParticleProcessMaterial_method_set_param_max>`

Sets the maximum value range for the given parameter.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_set_param_min:

.. rst-class:: classref-method

|void| **set_param_min**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, value\: :ref:`float<class_float>`\ ) :ref:`🔗<class_ParticleProcessMaterial_method_set_param_min>`

Sets the minimum value range for the given parameter.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_set_param_texture:

.. rst-class:: classref-method

|void| **set_param_texture**\ (\ param\: :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`, texture\: :ref:`Texture2D<class_Texture2D>`\ ) :ref:`🔗<class_ParticleProcessMaterial_method_set_param_texture>`

Sets the :ref:`Texture2D<class_Texture2D>` for the specified :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`.

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_set_particle_flag:

.. rst-class:: classref-method

|void| **set_particle_flag**\ (\ particle_flag\: :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>`, enable\: :ref:`bool<class_bool>`\ ) :ref:`🔗<class_ParticleProcessMaterial_method_set_particle_flag>`

If ``true``, enables the specified particle flag. See :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` for options.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
